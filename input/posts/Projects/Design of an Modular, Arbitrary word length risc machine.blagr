Title:Design of an Modular, Arbitrary word length RISC machine
Author:rsaxvc
CreatedDateTime:2009-04-07T20:30:53
ModifiedDateTime:2009-04-07T20:30:53
Tag:Cellular Automata
Tag:Design
Tag:Hardware
Tag:Turing completeness
---
<span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">I</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">'ve always been impressed with the simplicity of the <a class="zem_slink" href="http://en.wikipedia.org/wiki/One_instruction_set_computer" title="One instruction set computer" rel="wikipedia">OISC</a> ( one instruction set computer). One day, I had an interesting idea-Why not build it? In about six hours I had finished my first <a class="zem_slink" href="http://en.wikipedia.org/wiki/Design" title="Design" rel="wikipedia">design</a> on a whiteboard.</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">&nbsp;</span><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">Now, the 7400 logic series contains a lot of <a class="zem_slink" href="http://en.wikipedia.org/wiki/4-bit" title="4-bit" rel="wikipedia">4-bit</a> chips(registers, a counter I could use for a <a class="zem_slink" href="http://en.wikipedia.org/wiki/Program_counter" title="Program counter" rel="wikipedia">program counter</a>, tri-state buffers, <a class="zem_slink" href="http://en.wikipedia.org/wiki/Multiplexer" title="Multiplexer" rel="wikipedia">multiplexers</a>, and full adders). A four bit OISC machine with direct addressing has only 16 words. Keep in mind that an instruction is 3 words. So a 4-bit oisc could only hold 5 instructions, with a 4-bit bank for data. So I set out to design an 8-bit machine.</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">The first step in designing the 8bit machine was implementing effectively 8bit components out of <a class="zem_slink" href="http://en.wikipedia.org/wiki/Nibble" title="Nibble" rel="wikipedia">4bit</a> parts. Turns out, that almost all the necessary constructs are simply 2x4bit constructs. Here's an image of that first machine, partially implemented in</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><a href="http://oregano.gforge.lug.fi.uba.ar/">oregano</a></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">.</span><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><img alt="oisc-v1.png" src="http://208.53.181.144/blog/OISC/oisc-v1.png" width="627" height="827" class="mt-image-none" style="" /></span></div><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">Did you notice the symmetry? You can implement an 8bit component with 2 4bit components and some control glue.</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">Sadly, I had forgotten one very important step in the OISC architecture, and so my design was worthless-or so I thought. My roommate Ryan Meuth (of irontaco.com fame) showed me that what I had designed was a <a class="zem_slink" href="http://en.wikipedia.org/wiki/Cellular_automaton" title="Cellular automaton" rel="wikipedia">cellular automata</a> simulator. It was pretty cool, and I'll upload the schematics someday. However, it still wasn't a <a class="zem_slink" href="http://en.wikipedia.org/wiki/Turing_completeness" title="Turing completeness" rel="wikipedia">turing complete</a> machine, so I set out to design it again.</span></div></div>
