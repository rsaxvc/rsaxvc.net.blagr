Title:Design of an Modular, Arbitrary word length RISC machine
Author:rsaxvc
CreatedDateTime:2009-04-07T20:30:53
ModifiedDateTime:2009-04-07T20:30:53
Tag:Cellular Automata
Tag:Design
Tag:Hardware
Tag:Turing completeness
---
<div>

<p>
I've always been impressed with the simplicity of the
 <a href="http://en.wikipedia.org/wiki/One_instruction_set_computer" title="One instruction set computer" rel="wikipedia">OISC</a>
( one instruction set computer). One day, I had an interesting idea-Why not build it? In about six hours I had 
finished my first <a href="http://en.wikipedia.org/wiki/Design" title="Design" rel="wikipedia">design</a> on a whiteboard.
</p><p>
Now, the 7400 logic series contains a lot of 
<a href="http://en.wikipedia.org/wiki/4-bit" title="4-bit" rel="wikipedia">4-bit</a>
 chips(registers, a counter I could use for a 
<a href="http://en.wikipedia.org/wiki/Program_counter" title="Program counter" rel="wikipedia">program counter</a>, 
tri-state buffers, <a href="http://en.wikipedia.org/wiki/Multiplexer" title="Multiplexer" rel="wikipedia">multiplexers</a>, 
and full adders). A four bit OISC machine with direct addressing has only 16 words. 
Keep in mind that an instruction is 3 words. So a 4-bit oisc could only hold 5 instructions, with a 4-bit bank for data. 
So I set out to design an 8-bit machine.
</p><p>
The first step in designing the 8bit machine was implementing effectively 8bit components out of 
<a href="http://en.wikipedia.org/wiki/Nibble" title="Nibble" rel="wikipedia">4bit</a> parts. 
Almost all the necessary constructs are simply 2x4bit constructs. Here's an image of that first machine, 
partially implemented in <a href="http://oregano.gforge.lug.fi.uba.ar/">oregano</a>.
</p><p>

<a data-flickr-embed="true"  href="https://www.flickr.com/photos/40925843@N03/27441418833/in/dateposted-public/" title="oisc-v1"><img src="https://c2.staticflickr.com/8/7677/27441418833_4a29f77c3b.jpg" width="379" height="500" alt="oisc-v1"></a>

</p><p>
Did you notice the symmetry? You can implement an 8bit component with 2 4bit components and some control glue.
Sadly, I had forgotten one very important step in the OISC architecture, and so my design was worthless-or so I thought.
My roommate Ryan (of irontaco.com fame) showed me that what I had designed was still an 
<a href="http://en.wikipedia.org/wiki/Cellular_automaton" title="Cellular automaton" rel="wikipedia">cellular automata</a>
simulator. It was pretty cool, and I'll upload the schematics someday. However, it still wasn't a 
<a href="http://en.wikipedia.org/wiki/Turing_completeness" title="Turing completeness" rel="wikipedia">turing complete</a>
machine, so I set out to design it again.
</p>

</div>
