Title:OISC Hardware: Program Counter
Author:rsaxvc
CreatedDateTime:2009-09-24T21:35:17
ModifiedDateTime:2009-09-24T21:35:17
Tag:555 timer IC
Tag:Arithmetic logic unit
Tag:Central processing unit
Tag:Clock generator
Tag:Program counter
Tag:hardware
---
<span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">After building a new bench <a class="zem_slink" href="http://en.wikipedia.org/wiki/Power_supply" title="Power supply" rel="wikipedia">power supply</a>, I present, my first modular <a class="zem_slink" href="http://en.wikipedia.org/wiki/Program_counter" title="Program counter" rel="wikipedia">program counter</a>!</span><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><img alt="oisc-pc1.jpg" src="http://208.53.181.144/blog/OISC/oisc-pc1.jpg" width="640" height="480" class="mt-image-none" style="" /></span></div><div><br /></div><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">What's so special about it? You can daisy-chain them! In fact, there are two little four bit program counters running as one eight bit program counter right on that board. This isn't a terribly huge feat for a program counter, but eventually there will be an entire <a class="zem_slink" href="http://en.wikipedia.org/wiki/Central_processing_unit" title="Central processing unit" rel="wikipedia">CPU</a> built this way.</span></div><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span></div><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><img alt="oisc-pc2.jpg" src="http://208.53.181.144/blog/OISC/oisc-pc2.jpg" width="285" height="570" class="mt-image-none" style="" /></span></div><div><br /></div><div><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">Parts / Tools / Technical details:</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><ul style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><li>1 <a class="zem_slink" href="http://en.wikipedia.org/wiki/555_timer_IC" title="555 timer IC" rel="wikipedia">555 Timer</a> as a <a class="zem_slink" href="http://en.wikipedia.org/wiki/Clock_generator" title="Clock generator" rel="wikipedia">clock generator</a> producing 9.346 kHz.<br /></li><li>2 74LS193 up/down counters used as <a class="zem_slink" href="http://en.wikipedia.org/wiki/Daisy_chain_%28electrical_engineering%29" title="Daisy chain (electrical engineering)" rel="wikipedia">daisy-chained</a> 4 bit counters.</li><li>1 fairly sketchy capacitor of unknown capacitance and age ( the only free one I had at the time ).<br /></li><li>2 47kOhm 20% Tolerance resistors (<br />&nbsp;I had to deal with that unknown capacitor ).<br /></li><li>1 Digital Scope from the late 1980s, w/1MHz <a class="zem_slink" href="http://en.wikipedia.org/wiki/Sampling_rate" title="Sampling rate" rel="wikipedia">sampling rate</a>.<br /></li></ul><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">The clock overflow pin on the 74ls193 acts as a ~16x clock divisor. The first 74ls193, which given the clock input of 9.346kHz, iterates through all 16 values, then overflows at 584.6 Hz into the second 74ls193. The second 74ls193 ialso iterates through its 16 values, but ~16 times slower, then overflows at 36.56 Hz, which is right on the money for what I'd expect from the input.</span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; "><br /></span><span class="Apple-style-span" style="color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; ">For right now, the LOAD and CLEAR lines were manipulated by hand. In the final design they will be exported across modules. LOAD will be driven by the <a class="zem_slink" href="http://en.wikipedia.org/wiki/Arithmetic_logic_unit" title="Arithmetic logic unit" rel="wikipedia">ALU</a>'s output, and CLEAR will be part of the reset control.</span></div><br />
